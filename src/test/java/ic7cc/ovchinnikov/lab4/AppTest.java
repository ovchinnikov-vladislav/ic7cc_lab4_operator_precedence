/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ic7cc.ovchinnikov.lab4;

import ic7cc.ovchinnikov.lab4.lexer.Lexer;
import ic7cc.ovchinnikov.lab4.model.Token;
import org.junit.Assert;
import org.junit.Test;

import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Logger;

public class AppTest {

    private static final Logger log = Logger.getLogger(AppTest.class.getName());

    @Test
    public void testLexerSourceCode1() {
        Lexer lexer = new Lexer("test/source_code_1.txt");

        List<Token> tokenList = new LinkedList<>() {{
            add(Token.LBRACE);add(Token.IDENT);add(Token.ASSIGN);
            add(Token.FALSE);add(Token.SEMICOLON);add(Token.LBRACE);
            add(Token.IDENT);add(Token.ASSIGN);add(Token.TRUE);
            add(Token.OR);add(Token.FALSE);add(Token.AND);
            add(Token.NOT);add(Token.TRUE);add(Token.RBRACE);
            add(Token.SEMICOLON);add(Token.IDENT);add(Token.ASSIGN);
            add(Token.TRUE);add(Token.OR);add(Token.FALSE);
            add(Token.RBRACE);
        }};

        List<Token> resultTokens = new LinkedList<>();
        while (lexer.hasNext()) {
            Token t = lexer.next();
            resultTokens.add(t.getName().equals(Token.IDENT.getName()) ? Token.IDENT : t);
        }
        Assert.assertEquals(tokenList, resultTokens);
        Assert.assertEquals(Token.END, lexer.next());
    }

    @Test
    public void testLexerSourceCode2() throws IOException {
        Lexer lexer = new Lexer("test/source_code_2.txt");

        List<Token> tokenList = new LinkedList<>() {{
            add(Token.LBRACE);
            add(Token.IDENT);add(Token.ASSIGN);add(Token.TRUE);
            add(Token.RBRACE);
        }};

        List<Token> resultTokens = new LinkedList<>();
        while (lexer.hasNext()) {
            Token t = lexer.next();
            resultTokens.add(t.getName().equals(Token.IDENT.getName()) ? Token.IDENT : t);
        }
        Assert.assertEquals(tokenList, resultTokens);
        Assert.assertEquals(Token.END, lexer.next());
        Assert.assertEquals(Token.END, lexer.next());
    }

    @Test
    public void testLexerSourceCode3() throws IOException {
        Lexer lexer = new Lexer("test/source_code_3.txt");

        Token token = null;
        int i = 0;
        while (lexer.hasNext()) {
            token = lexer.next();
            i++;
        }
        Assert.assertEquals(Token.RBRACE, token);
        Assert.assertEquals(10, i);
        Assert.assertEquals(Token.END, lexer.next());
    }

    @Test
    public void testLexerSourceCode4() throws IOException {
        Lexer lexer = new Lexer("test/source_code_4.txt");

        Token token = null;
        int i = 0;
        while (lexer.hasNext()) {
            token = lexer.next();
            i++;
        }
        Assert.assertEquals(Token.RBRACE, token);
        Assert.assertEquals(32, i);
        Assert.assertEquals(Token.END, lexer.next());
    }

    @Test
    public void testLexerSourceCode5() throws IOException {
        Lexer lexer = new Lexer("test/source_code_5.txt");

        Token token = null;
        int i = 0;
        while (lexer.hasNext()) {
            token = lexer.next();
            i++;
        }
        Assert.assertEquals(Token.RBRACE, token);
        Assert.assertEquals(44, i);
        Assert.assertEquals(Token.END, lexer.next());
    }

}
